# Generated by Django 3.0 on 2020-05-06 12:38

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import djrichtextfield.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Domaine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Universite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=270, verbose_name='Last name  ')),
                ('prenom', models.CharField(max_length=270, verbose_name='First name   ')),
                ('adresse_email', models.EmailField(max_length=100, verbose_name='email ')),
                ('numero_telephone', models.IntegerField(blank=True, null=True, verbose_name='Phone number  ')),
                ('composante', models.CharField(max_length=100, verbose_name='University  ')),
                ('domaine', models.CharField(help_text='(engineering, marketing, computing science,  mechanics....)', max_length=100, verbose_name='Scientific background  ')),
                ('autre', models.CharField(blank=True, max_length=270, null=True, verbose_name='If other ')),
                ('choice_field', models.CharField(blank=True, max_length=270, null=True, verbose_name=' ')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('name_adre', models.CharField(blank=True, help_text=' PS: you can only choose one Person to work with', max_length=270, null=True, verbose_name='I want to work with (First and last Name) ')),
                ('prenom_adre', models.CharField(blank=True, max_length=270, null=True, verbose_name='First name   ')),
                ('adresse_email_adre', models.EmailField(blank=True, max_length=100, null=True, verbose_name='Email address of the person you want to work with.')),
                ('description', djrichtextfield.models.RichTextField(blank=True, help_text='What are your motives for applying to this e-workshop?', max_length=100000, null=True, verbose_name='Motivation  ')),
                ('fonction', models.ManyToManyField(related_name='interested_student', to='classroom.Subject', verbose_name='Function  ')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_teacher', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
